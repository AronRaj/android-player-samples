// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:0.11.+'
    classpath 'de.undercouch:gradle-download-task:0.+'
  }
}

println "Using Android Native Player version: $anpVersion"

project.ext {
  imaAndroidSdkJarFileName = "ima-android-sdk-beta7.jar"
}

// Automatically download the Google IMA third party zip file and
// extract the jar to satisfy the dependency.
def downloadIMA() {
  def libsdk = 'libs/' + imaAndroidSdkJarFileName

  // Conditionally download the Google IMA SDK during
  // configuration.  This step is done once.  The 'clean' task will not
  // remove libraries from /libs/.
  File dep = file(libsdk)
  if (!dep.exists()) {
    apply plugin: 'download-task'

    println "Downloading the Google IMA SDK..."

    download {
      src 'https://dl.google.com/in-stream/google_sdk/android/v3/' + imaAndroidSdkJarFileName
      dest file("${System.getProperty("user.home")}/libs/ima-android-sdk.jar")
    }
  }
}

subprojects {
  apply plugin: 'android'

  repositories {
    mavenCentral()
    maven {
      url 'http://repo.brightcove.com/snapshots'
    }
    maven {
      url 'http://repo.brightcove.com/releases'
    }
    maven {
      url System.getenv('ANDROID_HOME') + '/extras/google/m2repository'
    }
    mavenLocal()

    // This top level file repository will provide/contain third party
    // dependencies which are either downloaded directly (not using a
    // Maven repo) or installed manually for something like VisualOn.
    flatDir {
      dirs "${System.getProperty("user.home")}/libs"
    }
  }

  android {
    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    defaultConfig {
      minSdkVersion 10
      targetSdkVersion 19
    }
  }

  dependencies {
    compile 'com.android.support:appcompat-v7:+'
  }

  if (project.name.contains('AdobePass')) {
    dependencies {
      compile files("${rootProject.projectDir}/libs/android_accessenabler-1.7.2.jar")
      compile 'com.google.code.gson:gson:2.+'
    }
  }

  if (project.name.contains('AIS')) {
    dependencies {
      compile 'com.google.code.gson:gson:2.+'
    }
  }

  if (project.name.contains('IMA')) {
    downloadIMA()
    dependencies {
      compile "com.brightcove.player:android-ima-plugin:${anpVersion}"
      compile files("${rootProject.projectDir}/libs/" + imaAndroidSdkJarFileName)
    }
  }

  if (project.name.contains('OnceUx')) {
    dependencies {
      compile "com.brightcove.player:android-onceux-plugin:${anpVersion}"
    }
  }

  if (project.name.contains('Widevine')) {
    dependencies {
      compile "com.brightcove.player:android-widevine-plugin:${anpVersion}"
    }

    android {
      defaultConfig {
        minSdkVersion 11
      }
    }
  }

  if (project.name.contains('HLS')) {
    dependencies {
      compile "com.brightcove.player:android-hls-player:${anpVersion}"
    }
  }

  if (project.name.contains('WebVTT')) {
    android {
      defaultConfig {
        minSdkVersion 19
        targetSdkVersion 19
      }
    }
  }

  if (project.name.contains('WebView')) {
    android {
      lintOptions {
        disable 'SetJavaScriptEnabled'
      }
    }
  }

  if (project.name.contains('Cast')) {
    dependencies {
      compile "com.brightcove.player:android-cast-plugin:${anpVersion}"
      compile 'com.google.sample.castcompanionlibrary:CastCompanionLibrary-android:+'
      compile 'com.google.android.gms:play-services:+'
      compile 'com.android.support:mediarouter-v7:+'
    }
  }

  if (project.name.contains('FreeWheel')) {
    dependencies {
      compile "com.brightcove.player:android-freewheel-plugin:${anpVersion}"
      compile files("${rootProject.projectDir}/libs/AdManager.jar")
    }
  }

  println "Processing ${project.name}"
}
